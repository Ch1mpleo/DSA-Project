// ======= DO NOT EDIT THIS FILE ============

import java.io.*;
import java.util.*;

class Main {

    public static void main(String args[]) throws Exception {
        MyTree t = new MyTree();
        t.load();
        int choice;
        Scanner sca = new Scanner(System.in);
        System.out.println();
        System.out.println(" 1. Test f1 - compute height");
        System.out.println(" 2. Test f2 - count nodes");
        System.out.println(" 3. Test f3 - count leaf nodes");
        System.out.println(" 4. Test f4 - compute sum of nodes ");
        System.out.println(" 5. Test f5 - Pre-Order ");
        System.out.println(" 6. Test f6 - In-Order ");
        System.out.println(" 7. Test f7 - Post-Order ");
        System.out.println(" 8. Test f8 - Search ");
        System.out.println(" 9. Test f9 - Xuất ra giá trị chẵn tăng dần ");
        System.out.println(" 10. Test f10 - Delete node is leaf ");
//        System.out.println(" 9. Test f9 - Delete node one child ");
//        System.out.println(" 9. Test f9 - Delete node have two child");
//        System.out.println(" 9. Test f9 - Delete node have two child");
//        System.out.println(" 9. Test f9 - Delete node have two child");
        System.out.println(" 13. Test f13 - Rotate root with left child:");
        System.out.println(" 14. Test f14 - Rotate root with right child:");
        System.out.println(" 15. Test f15 - Double rotate root with left child:");
        System.out.println(" 16. Test f16 - Double rotate root with right child:");
        System.out.print("    Your selection (1 -> 16): ");
        choice = sca.nextInt();
        sca.nextLine();
        int r;
        switch (choice) {
            case 1:
                System.out.println("Height:");
                r = t.f1();
                System.out.println(r);
                break;
            case 2:
                System.out.println("Count nodes:");
                r = t.f2();
                System.out.println(r);
                break;
            case 3:
                System.out.println("Count leaf nodes:");
                r = t.f3();
                System.out.println(r);
                break;
            case 4:
                System.out.println("Sum of nodes:");
                r = t.f4();
                System.out.println(r);
                break;
            case 5:
                System.out.println("PreOrder:");
                t.f5();
                break;
            case 6:
                System.out.println("InOrder:");
                t.f6();
                break;
            case 7:
                System.out.println("PostOrder:");
                t.f7();
                break;
            case 8:
                System.out.println("Sum of nodes:");
                r = t.f8(10);
                if (r == 1) {
                    System.out.println("Yes");
                } else {
                    System.out.println("No");
                }
                break;
            case 9:
                System.out.println("List số chẵn tăng dần: ");
                t.f9();
                break;
            case 10:
                System.out.println("Delete node is leaf: ");
                t.f10();
                break;
            case 11:
                System.out.println("Delete node has one child: ");
                t.f11();
                break;
            case 12:
                System.out.println("Delete node has two child: ");
                t.f12();
                break;
            case 13:
                System.out.println("Original Tree:");
                MyTree.Rotations.visualizeTree(t.root, "", false);
                System.out.println("PreOrder: ");
                t.f5();
                System.out.println("\nInOrder: ");
                t.f6();
                System.out.println("\nPostOrder: ");
                t.f7();
                System.out.println("\nRotate root with left child:");
                t.root = MyTree.Rotations.rotateWithLeftChild(t.root);

                System.out.println("\nTree after rotation:");
                MyTree.Rotations.visualizeTree(t.root, "", false);
                System.out.println("PreOrder: ");
                t.f5();
                System.out.println("\nInOrder: ");
                t.f6();
                System.out.println("\nPostOrder: ");
                t.f7();
                break;

            case 14:
                System.out.println("Original Tree:");
                MyTree.Rotations.visualizeTree(t.root, "", false);
                System.out.println("PreOrder: ");
                t.f5();
                System.out.println("\nInOrder: ");
                t.f6();
                System.out.println("\nPostOrder: ");
                t.f7();
                System.out.println("\nRotate root with right child:");
                t.root = MyTree.Rotations.rotateWithRightChild(t.root);

                System.out.println("\nTree after rotation:");
                MyTree.Rotations.visualizeTree(t.root, "", false);
                System.out.println("PreOrder: ");
                t.f5();
                System.out.println("\nInOrder: ");
                t.f6();
                System.out.println("\nPostOrder: ");
                t.f7();
                break;

            case 15:
                System.out.println("Original Tree:");
                MyTree.Rotations.visualizeTree(t.root, "", false);
                System.out.println("PreOrder: ");
                t.f5();
                System.out.println("\nInOrder: ");
                t.f6();
                System.out.println("\nPostOrder: ");
                t.f7();
                t.f7();
                System.out.println("\nDouble rotate root with left child:");
                t.root = MyTree.Rotations.doubleRotateWithLeftChild(t.root);

                System.out.println("\nTree after rotation:");
                MyTree.Rotations.visualizeTree(t.root, "", false);
                System.out.println("PreOrder: ");
                t.f5();
                System.out.println("\nInOrder: ");
                t.f6();
                System.out.println("\nPostOrder: ");
                t.f7();
                break;

            case 16:
                System.out.println("Original Tree:");
                MyTree.Rotations.visualizeTree(t.root, "", false);
                System.out.println("PreOrder: ");
                t.f5();
                System.out.println("\nInOrder: ");
                t.f6();
                System.out.println("\nPostOrder: ");
                t.f7();

                System.out.println("\nDouble rotate root with right child:");
                t.root = MyTree.Rotations.doubleRotateWithRightChild(t.root);

                System.out.println("\nTree after rotation:");
                MyTree.Rotations.visualizeTree(t.root, "", false);
                System.out.println("PreOrder: ");
                t.f5();
                System.out.println("\nInOrder: ");
                t.f6();
                System.out.println("\nPostOrder: ");
                t.f7();
                break;
            //tính số lượng cây in ra nếu cho n- node
            default:
                System.out.println("Wrong selection");
        }
        System.out.println();
    }
}
